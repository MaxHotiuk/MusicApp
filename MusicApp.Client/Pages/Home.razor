@page "/"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@using MusicApp.Client.Interfaces
@implements IDisposable

<MudContainer Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Welcome to Your Spotify App</MudText>
    
    <MudText Typo="Typo.body1" Class="mb-8">
        This application allows you to connect your Spotify account and view your profile and playlists.
    </MudText>
    
    <AuthorizeView>
        <Authorized>
            <MudCard Class="mb-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6">You're connected to Spotify!</MudText>
                    <MudText Typo="Typo.body1">Use the menu options to explore your profile and playlists.</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/profile">View Profile</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="/playlists">View Playlists</MudButton>
                </MudCardActions>
            </MudCard>
        </Authorized>
        <NotAuthorized>
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Get Started</MudText>
                    <MudText Typo="Typo.body1">Connect your Spotify account to get started.</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" 
                            Color="Color.Success" 
                            OnClick="LoginWithSpotify"
                            StartIcon="@Icons.Material.Filled.MusicNote">
                        Connect with Spotify
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </NotAuthorized>
    </AuthorizeView>
</MudContainer>

@code {
    private void LoginWithSpotify()
    {
        NavigationManager.NavigateTo("/login");
    }

    // This component doesn't need any special JS Interop handling
    // because AuthorizeView already handles prerendering scenarios correctly
    public void Dispose()
    {
        // Clean up resources if needed
    }
}