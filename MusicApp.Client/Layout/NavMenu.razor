@using MusicApp.Client.Interfaces
@using MusicApp.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService AuthService

<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="mp3-editor" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.MusicNote">MP3 Editor</MudNavLink>
    <AuthorizeView>
        <Authorized>
            <MudNavLink Href="/profile" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
            <MudNavLink Href="/playlists" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Playlists</MudNavLink>
            <MudNavLink Href="/artists/search" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Search">Search Artists</MudNavLink>
            <MudNavLink Href="/artist-explorer" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Explore">Artist Explorer</MudNavLink>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="/login" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Login">Login</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>

@code {
    // This component doesn't need any special JS Interop handling
    // because AuthorizeView already handles prerendering scenarios correctly
    
    public void Dispose()
    {
        // Clean up resources if needed
    }
}